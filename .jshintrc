{
  // Julien Fontanet JSHint configuration
  // https://gist.github.com/julien-f/8095615
  //
  // Changes from defaults:
  // - all enforcing options enabled (except `++`, `--`, ES3 and strict mode which is enabled automatically by Babel)
  // - single quotes
  // - all relaxing options disabled (except ES5 and ES6)
  // - environments are set to Browserify, mocha & Node.js
  //
  // See http://jshint.com/docs/ for more details

  "maxerr"        : 50,       // {int} Maximum error before stopping

  // Enforcing
  "bitwise"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
  "camelcase"     : true,     // true: Identifiers must be in camelCase
  "curly"         : true,     // true: Require {} for every new block or scope
  "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
  "es3"           : false,    // true: Require ES3 compatible code (for IE < 9)
  "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
  "freeze"        : true,     // true: Prohibit overwriting prototypes of native objects (Array, Date, ...)
  "futurehostile" : true,     // true: Prohibit use of identifiers reserved for future JavaScript versions.
  "latedef"       : true,     // true: Require variables/functions to be defined before being used
  "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "nocomma"       : true,     // true: Prohibit use of the comma operator
  "nonbsp"        : true,     // true: Prohibit use of non breakable spaces
  "nonew"         : true,     // true: Prohibit use of constructors for side-effects (without assignment)
  "plusplus"      : false,    // true: Prohibit use of `++` & `--`
  "quotmark"      : "single", // Quotation mark consistency:
                              //   false    : do nothing (default)
                              //   true     : ensure whatever is used is consistent
                              //   "single" : require single quotes
                              //   "double" : require double quotes
  "singleGroups"  : true,     // Prohibit unnecessary use of the grouping operator `()`
  "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
  "unused"        : true,     // true: Require all defined variables be used
  "strict"        : false,    // true: Requires all functions run in ES5 Strict Mode
  "maxcomplexity" : 7,        // {int} Max cyclomatic complexity per function
  "maxdepth"      : 3,        // {int} Max depth of nested blocks (within functions)
  "maxlen"        : 80,       // {int} Max number of characters per line
  "maxparams"     : 4,        // {int} Max number of formal params allowed per function
  "maxstatements" : 20,       // {int} Max number statements per function

  // Relaxing
  "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
  "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
  "elision"       : false,     // true: Tolerate use of ES3 array elision element
  "eqnull"        : false,     // true: Tolerate use of `== null`
  "es5"           : true,      // true: Tolerate ES5 syntax
  "esnext"        : true,      // true: Allow ES.next (ES6) syntax (ex: `const`)
  "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
  "expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
  "globalstrict"  : false,     // true: Allow global "use strict" (also enables 'strict')
  "iterator"      : false,     // true: Tolerate using the `__iterator__` property
  "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "loopfunc"      : false,     // true: Tolerate functions being defined in loops
  "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
                               // (ex: `for each`, multiple try/catch, function expressionâ€¦)
  "noyield"       : false,     // true: Tolerate use of generators without `yield`s.
  "notypeof"      : false,     // true: Tolerate typeof comparison with unknown values.
  "proto"         : false,     // true: Tolerate using the `__proto__` property
  "scripturl"     : false,     // true: Tolerate script-targeted URLs
  "shadow"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
  "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
  "validthis"     : false,     // true: Tolerate using this in a non-constructor function
  "noyield"       : false,     // true: Tolerate generators without yields

  // Environments
  "browser"       : false,    // Web Browser (window, document, etc)
  "browserify"    : true,     // Browserify (node.js code in the browser)
  "couch"         : false,    // CouchDB
  "devel"         : false,    // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "jquery"        : false,    // jQuery
  "mocha"         : true,     // mocha
  "mootools"      : false,    // MooTools
  "node"          : true,     // Node.js
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "phantom"       : false,    // PhantomJS
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "rhino"         : false,    // Rhino
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false,    // Yahoo User Interface

  // Custom Globals
  "globals"       : {}        // additional predefined global variables
}
